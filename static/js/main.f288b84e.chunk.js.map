{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","robots.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchchange","type","placeholder","onChange","username","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","this","filteredRobots","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAbF,SAACC,GAAW,IACjBC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MACjB,OACC,yBAAMC,UAAW,oDAChB,yBAAKC,IAAM,UAAUC,IAAG,+BAA2BL,EAA3B,uBACxB,6BACC,4BAAKC,GACL,2BAAIC,MCYOI,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CAAMC,IAAOD,EACbV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCGPU,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKV,UAAY,OAChB,2BACCA,UAAY,mCACZW,KAAO,OACPC,YAAc,gBACdC,SAAaH,MCTJN,EAAS,CACrB,CACCP,GAAI,EACJC,KAAM,cACNgB,SAAU,UACVf,MAAO,wBAGR,CACCF,GAAI,EACJC,KAAM,iBACNgB,SAAU,QACVf,MAAO,mBAGR,CACCF,GAAI,EACJC,KAAM,kBACNgB,SAAU,OACVf,MAAO,kBAGR,CACCF,GAAI,EACJC,KAAM,mBACNgB,SAAU,UACVf,MAAO,6BAGR,CACCF,GAAI,EACJC,KAAM,kBACNgB,SAAU,OACVf,MAAO,kBAGR,CACCF,GAAI,EACJC,KAAM,WACNgB,SAAU,WACVf,MAAO,sBAGR,CACCF,GAAI,EACJC,KAAM,cACNgB,SAAU,OACVf,MAAO,mBAGR,CACCF,GAAI,EACJC,KAAM,WACNgB,SAAU,QACVf,MAAO,mBAGR,CACCF,GAAI,EACJC,KAAM,gBACNgB,SAAU,SACVf,MAAO,oBAGR,CACCF,GAAI,GACJC,KAAM,cACNgB,SAAU,UACVf,MAAO,qBAGR,CACCF,GAAI,GACJC,KAAM,eACNgB,SAAU,SACVf,MAAO,oBAGR,CACCF,GAAI,GACJC,KAAM,QACNgB,SAAU,OACVf,MAAO,oBCxEMgB,G,MARA,SAACnB,GACf,OACC,yBAAKoB,MAAS,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACtEvB,EAAMwB,YC+BKC,E,kDA5Bd,aAAc,IAAD,8BACZ,gBAMDC,eAAiB,SAAAC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAN1C,EAAKC,MAAQ,CACZxB,OAAQA,EACRqB,YAAa,IAJF,E,qDAWH,IAAD,EACuBI,KAAKD,MAA5BxB,EADA,EACAA,OAAQqB,EADR,EACQA,YACVK,EAAiB1B,EAAO2B,QAAO,SAAAC,GACpC,OAAOA,EAAMlC,KAAKmC,cAAcC,SAAST,EAAYQ,kBAEtD,OACC,yBAAKjC,UAAY,MAChB,wBAAIA,UAAY,MAAhB,iBACA,kBAAC,EAAD,CAAWU,aAAgBmB,KAAKP,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUlB,OAAU0B,U,GAtBPK,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,IAAMC,WAAP,KAAkB,kBAAC,EAAD,OAA2BC,SAASC,eAAe,SD2H/E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f288b84e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\tconst {id, name, email} = props;\r\n\treturn (\r\n\t\t<div  className ='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt = 'robopic' src ={`https://robohash.org/${id}.png?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card key = {i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;\t","import React from 'react';\r\n\r\nconst SearchBox = ({searchchange}) => {\r\n\treturn (\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype = 'text' \r\n\t\t\t\tplaceholder = 'Search Robots' \r\n\t\t\t\tonChange = { searchchange }\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox;","export const robots = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tname: 'C.V.Vishnuu',\r\n\t\tusername: 'Vishnuu',\r\n\t\temail: 'cvishnuu01@gmail.com',\r\n\t},\r\n\r\n\t{\r\n\t\tid: 2,\r\n\t\tname: 'R.Indra Mohini',\r\n\t\tusername: 'Indra',\r\n\t\temail: 'indra@gmail.com',\r\n\t},\r\n\r\n\t{\r\n\t\tid: 3,\r\n\t\tname: 'C.K.Venu Kuttan',\r\n\t\tusername: 'Venu',\r\n\t\temail: 'venu@gmail.com',\r\n\t},\r\n\r\n\t{\r\n\t\tid: 4,\r\n\t\tname: 'Jenisha Gopinath',\r\n\t\tusername: 'Jenisha',\r\n\t\temail: 'jenishagopinath@gmail.com',\r\n\t},\r\n\r\n\t{\r\n\t\tid: 5,\r\n\t\tname: 'Ajay Maheswaran',\r\n\t\tusername: 'Ajay',\r\n\t\temail: 'ajay@gmail.com',\r\n\t},\r\n\r\n\t{\r\n\t\tid: 6,\r\n\t\tname: 'Dharmish',\r\n\t\tusername: 'Dharmish',\r\n\t\temail: 'dharmish@gmail.com',\r\n\t},\r\n\r\n\t{\r\n\t\tid: 7,\r\n\t\tname: 'Mark Joseph',\r\n\t\tusername: 'Mark',\r\n\t\temail: 'Markj@gmail.com',\r\n\t},\r\n\r\n\t{\r\n\t\tid: 8,\r\n\t\tname: 'Ruchitha',\r\n\t\tusername: 'Ruchi',\r\n\t\temail: 'ruchi@gmail.com',\r\n\t},\r\n\r\n\t{\r\n\t\tid: 9,\r\n\t\tname: 'Nithin Mishra',\r\n\t\tusername: 'Nithin',\r\n\t\temail: 'nithin@gmail.com',\r\n\t},\r\n\r\n\t{\r\n\t\tid: 10,\r\n\t\tname: 'Arshath Raj',\r\n\t\tusername: 'Arshath',\r\n\t\temail: 'arshath@gmail.com',\r\n\t},\r\n\r\n\t{\r\n\t\tid: 11,\r\n\t\tname: 'Neeraj Sunil',\r\n\t\tusername: 'Neeraj',\r\n\t\temail: 'neeraj@gmail.com',\r\n\t},\r\n\r\n\t{\r\n\t\tid: 12,\r\n\t\tname: 'Sofia',\r\n\t\tusername: \"Sofi\",\r\n\t\temail: 'sofia@gmail.com',\r\n\t}\r\n];","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style = {{ overflowY: 'scroll', border: '1px solid black', height: '700px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { robots } from '../robots';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: robots,\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\tonSearchChange = event => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { robots, searchfield} = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t});\r\n\t\treturn(\r\n\t\t\t<div className = 'tc'>\r\n\t\t\t\t<h1 className = 'f1'>Robot Friends</h1>\r\n\t\t\t\t<SearchBox searchchange = {this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots = {filteredRobots } />\r\n\t\t\t\t</Scroll>\t\r\n\t\t\t</div>\r\n\t)\r\n\t}\r\n}\r\n\r\nexport default App;    ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();          "],"sourceRoot":""}